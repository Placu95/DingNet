module protelis:homeHeating_timer

import it.unibo.acdingnet.protelis.util.Const.ProtelisEnv.*
import it.unibo.acdingnet.protelis.util.Utils.*
import org.protelis.lang.datatype.Option.*
import protelis:state:time
import protelis:lang:utils

public def decreaseTemp() = self.setCurrentTemp(rep (v <- env.get(CURRENT_TEMP)) {
	cyclicFunction(1800, { roundToDecimal(v - self.getDecreaseDelta()) }, v)
})

public def increaseTemp() = self.setCurrentTemp(rep (v <- env.get(CURRENT_TEMP)) {
	cyclicFunction(1800, { roundToDecimal(v + self.getIncreaseDelta()) }, v)
})

public def emptyFun() = 0

public def idw(sensorValue) = if(sensorValue.filter { it.get(0) == getUID() }.isEmpty()) {
		let weight = sensorValue.map{ 1 / it.get(1) }.reduce(1) { r1, r2 -> r1 + r2 }
        sensorValue.map { it.get(2) / it.get(1) }.reduce(1) { r1, r2 -> r1 + r2 } / weight
	} else {
		sensorValue.filter { it.get(0) == getUID() }.get(0).get(2)
	}

let neighborsOpt = nbr(mux(env.has(IAQLEVEL)) {
	optionally([getUID(), self.getCoordinates(), env.get(IAQLEVEL)])
} else {
	absent()
})

let neighbors = foldUnion([neighborsOpt]).filter { it.isPresent() }.map { it.get() }
let pollutionField = nbr(neighbors).map { it.set(1, self.distanceTo(it.get(1))) }
let sensorValues = distinctByUID(foldUnion(pollutionField))

let maxTemperature = self.temperatureByPollution(idw(sensorValues))
if (env.has(CURRENT_TEMP)) {
    env.put(MAX_TEMP, maxTemperature)
	//self.log("maxTemp: " + maxTemperature + " currentTemp " + env.get(CURRENT_TEMP) + " at: " + self.getCurrentTime())
}

optionally(env.get(DESIRED_TEMP, JAVA_NULL))
	.map { mux(it < maxTemperature) { it } else { maxTemperature } }
	.map { 
		if(it < env.get(CURRENT_TEMP)) { decreaseTemp } 
		else { if(it > env.get(CURRENT_TEMP)) { increaseTemp } else { emptyFun } }
	}
	.orElse(emptyFun).apply()

